from befh.api_socket import ApiSocket
try:
    import urllib.request as urlrequest
except ImportError:
    import urllib as urlrequest

import json
import ssl
import requests

class RESTfulApiSocket(ApiSocket):
    """
    Generic REST API call
    """
    DEFAULT_URLOPEN_TIMEOUT = 5

    def __init__(self):
        """
        Constructor
        """
        ApiSocket.__init__(self)

    @classmethod
    def request(cls, url, verify_cert=True, extra_header = None):
        """
        Web request
        :param: url: The url link
        :return JSON object
        """
        jsonstr = ""
        if 0:
            req = urlrequest.Request(url, headers={'User-Agent': 'Mozilla/5.0'})
            # res = urlrequest.urlopen(url)
            if verify_cert:
                res = urlrequest.urlopen(
                    req,
                    timeout=RESTfulApiSocket.DEFAULT_URLOPEN_TIMEOUT)
            else:
                res = urlrequest.urlopen(
                    req,
                    context=ssl._create_unverified_context(),
                    timeout=RESTfulApiSocket.DEFAULT_URLOPEN_TIMEOUT)

            jsonstr = res.read().decode('utf8')
        else:
            header = {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3269.3 Safari/537.36',
                'Connection': 'keep-alive',
                'Accept': 'text/html,application/json,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
                'Accept-Encoding': 'gzip, deflate, br',
                'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8'}
            if extra_header:
                header = dict(header, **extra_header)

            r = requests.get(url, headers=header)
            jsonstr = r.text.encode('utf-8')

        try:
            res = json.loads(jsonstr)
            return res
        except:
            return {}

    @classmethod
    def parse_l2_depth(cls, instmt, raw):
        """
        Parse raw data to L2 depth
        :param instmt: Instrument
        :param raw: Raw data in JSON
        """
        return None

    @classmethod
    def parse_trade(cls, instmt, raw):
        """
        :param instmt: Instrument
        :param raw: Raw data in JSON
        :return:
        """
        return None

    @classmethod
    def get_order_book(cls, instmt):
        """
        Get order book
        :param instmt: Instrument
        :return: Object L2Depth
        """
        return None

    @classmethod
    def get_trades(cls, instmt, trade_id):
        """
        Get trades
        :param instmt: Instrument
        :param trade_id: Trade id
        :return: List of trades
        """
        return None

